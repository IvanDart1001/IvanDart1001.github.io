<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PotNote -&gt; Cooking...</title>
  
  <subtitle>我的代码是要突破天际的啊！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://potnote.tk/"/>
  <updated>2018-01-05T16:29:12.336Z</updated>
  <id>http://potnote.tk/</id>
  
  <author>
    <name>Ivan Dart</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《领域驱动设计》精读笔记——第一部分【运用领域模型】第一章【消化知识】</title>
    <link href="http://potnote.tk/2018/01/06/%E3%80%8A%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E3%80%8B%E7%B2%BE%E8%AF%BB%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E3%80%90%E8%BF%90%E7%94%A8%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0%E3%80%90%E6%B6%88%E5%8C%96%E7%9F%A5%E8%AF%86%E3%80%91/"/>
    <id>http://potnote.tk/2018/01/06/《领域驱动设计》精读笔记——第一部分【运用领域模型】第一章【消化知识】/</id>
    <published>2018-01-05T16:07:45.000Z</published>
    <updated>2018-01-05T16:29:12.336Z</updated>
    
    <content type="html"><![CDATA[<p>我觉得要学学设计模式了。软实力也是很重要的。</p><p>P.S. 这个仅仅是本人用作知识梳理用的笔记，大部分摘自Eric Evans著的《Domain-Driven Design: Tackling Complexity in the Heart of Software》，仅代表本人觉得重要的知识点。</p><a id="more"></a><h1 id="第一部分：运用领域模型"><a href="#第一部分：运用领域模型" class="headerlink" title="第一部分：运用领域模型"></a><strong>第一部分：运用领域模型</strong></h1><h2 id="第一章：消化知识"><a href="#第一章：消化知识" class="headerlink" title="第一章：消化知识"></a>第一章：消化知识</h2><p>高亮词汇：</p><pre><code>模型：模型是对现实的解释，通常用来描绘人们所关注的现实或想法的某个方面，其特征通常是把与解决问题密切相关的方面抽象出来，而忽略无关的细节。领域：领域是项目所相关的问题区域，一些涉及物质世界，如，机票预订程序的领域中包括飞机乘客在内；另一些则是无形的，如，会计程序的金融领域。 // 思考：源代码控制系统的领域就是软件开发本身。</code></pre><h3 id="1-1-有效建模的要素"><a href="#1-1-有效建模的要素" class="headerlink" title="1.1 有效建模的要素"></a><em>1.1 有效建模的要素</em></h3><pre><code>1. 模型和实现的绑定        // 抽象概念和实体的联系2. 建立了一种基于模型的语言        // 用于协作沟通的术语3. 开发一个蕴含丰富知识的模型        // 带有行为和强制性规则的一种能表达研究类型在某些方面的特性的一种对象4. 提炼模型        // 在优化模型的过程中，重要的概念被不断的添加到模型中，不再使用的或者不重要的概念会从模型中被移除5. 头脑风暴和实验        // 当团队走查①场景的时候，口头表述的清晰与否本身就可作为所提议的模型的一种可行性测试</code></pre><p>注①：走查：walk through，原来是指一种非正式的代码评审活动，现在也广泛用于其他方面，一般是指一步步检查或分步讨论。</p><h3 id="1-2-知识消化"><a href="#1-2-知识消化" class="headerlink" title="1.2 知识消化"></a><em>1.2 知识消化</em></h3><pre><code>一般方法：在大量的信息中探寻有用的部分，不断尝试各种信息组织方式，寻找对大量信息有意义的简单视图。在其过程中，很多模型被放弃或者改造。只有找到一组适用于所有细节的抽象概念后，工作才算成功。另外在消化理解模型的过程中，领域模型的不断精化迫使开发人员学习重要的业务原理，而不是机械地进行功能开发。领域专家被迫提炼自己已知的重要知识的过程往往也是完善其自身理解的过程，而且他们会渐渐理解软件项目所必需的概念严谨性。同时模型也在不断改进的同时成为组织项目信息流的工具。模型聚焦于需求分析，它与编程和设计紧密交互。</code></pre><h4 id="精选摘要："><a href="#精选摘要：" class="headerlink" title="精选摘要："></a><em>精选摘要：</em></h4><blockquote><p>在传统的瀑布方法中，业务专家与分析员进行讨论，分析员消化理解这些知识后，对其进行抽象并将结果传递给程序员，再由程序员编写软件代码。由于这种方法完全没有反馈，英雌总是失败。分析员全权负责创建模型，但他们创建的模型只是基于业务专家的意见。他们既没有向程序员学习的机会，也得不到早期软件版本的经验。知识只是朝一个方向流动，而不会累积。</p><p>有些项目使用的迭代过程，但由于没有对知识进行抽象而无法建立起知识体系。开发人员听专家们描述某项所需的特性，然后开始构建它。他们将结果展示给专家，并询问接下来做什么。如果程序员愿意进行重构，则能够保持软件足够整洁，以便继续扩展它；但如果程序员对领域不感兴趣，则他们只会了解程序应该执行的功能，而不去了解它背后的原理。虽然这样也能开发出可用的软件，但项目永远也不会从原有特性中自然地扩展出强大的新特性。</p></blockquote><h3 id="1-3-持续学习"><a href="#1-3-持续学习" class="headerlink" title="1.3 持续学习"></a><em>1.3 持续学习</em></h3><ol><li><p>当开始编写软件时，其实我们所知甚少。</p><p> （项目初期可能产生的通病：错误的假设，无法确立真正所需重点知识，错判实现难易程度）</p></li><li><p>所有项目都会丢失知识。</p><p> （比如可能一些已经学到业务原理和团队沟通使用的共通术语的人去干别的事情了，被外包出去的关键子系统只回收到了代码而没有一些清晰的文档作为辅助学习与解读材料等）</p></li><li><p>团队需要善于自学的成员。</p><p> （需要学习的内容不只是自己负责的任务细节，还应该包括整个领域模型中不断迭代更新的业务原理与共通术语等）</p></li><li><p>学习知识的目的并不是让你成为领域专家，只是学会如何和该业务领域的专家沟通，理解与应用业务有关的主要概念，并学会检查所构建的内容是否合理。</p></li></ol><p><br></p><pre><code>另外，假设早期模型精化的工作被证实为非重点核心概念，但是这也是很重要的。因为关键的模型元素被保留了下来，而更重要的是，这些早期工作启动了知识消化的过程，这使得所有后续工作更加高效：团队成员、开发人员与领域专家都学到了知识，他们开始使用一种公共的语言，而且形成了贯穿整个实现过程的反馈闭环。这样，一个发现之旅悄然开始了。</code></pre><h3 id="1-4-设计过程中的好习惯"><a href="#1-4-设计过程中的好习惯" class="headerlink" title="1.4 设计过程中的好习惯"></a><em>1.4 设计过程中的好习惯</em></h3><ol><li><p>为了实现更明确的设计，所有人都需理解业务所关注对象及其所包含规则的本质。</p></li><li><p>开发人员可以向业务专家展示技术工件，甚至是代码，但应该是领域专家（在开发人员指导下）可以理解的，以便形成反馈闭环。</p></li></ol><h3 id="1-5-深层模型"><a href="#1-5-深层模型" class="headerlink" title="1.5 深层模型"></a><em>1.5 深层模型</em></h3><p>有用的模型很少停留在表面。随着对领域和应用程序需求的理解逐步加深，我们往往会丢弃那些最初看起来很重要的表面元素，或者切换他们的角度。这时，一些开始时不可能发现的巧妙抽象就会逐渐浮出水面，而它们可能恰恰切中问题的要害。</p><h1 id="知识消化是一种探索，永无止境。"><a href="#知识消化是一种探索，永无止境。" class="headerlink" title="知识消化是一种探索，永无止境。"></a><strong>知识消化是一种探索，永无止境。</strong></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我觉得要学学设计模式了。软实力也是很重要的。&lt;/p&gt;
&lt;p&gt;P.S. 这个仅仅是本人用作知识梳理用的笔记，大部分摘自Eric Evans著的《Domain-Driven Design: Tackling Complexity in the Heart of Software》，仅代表本人觉得重要的知识点。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>牢骚灌水区（可在底部disqus评论系统中盖楼</title>
    <link href="http://potnote.tk/2017/12/01/%E7%89%A2%E9%AA%9A%E7%81%8C%E6%B0%B4%E5%8C%BA%EF%BC%88%E5%8F%AF%E5%9C%A8%E5%BA%95%E9%83%A8disqus%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9B%96%E6%A5%BC/"/>
    <id>http://potnote.tk/2017/12/01/牢骚灌水区（可在底部disqus评论系统中盖楼/</id>
    <published>2017-11-30T20:20:28.000Z</published>
    <updated>2017-11-30T20:22:48.897Z</updated>
    
    <content type="html"><![CDATA[<p>人闲下来的时候，发牢骚的时候，感到后悔的时候，失落失望的时候才能感受到自己蠢在哪里。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人闲下来的时候，发牢骚的时候，感到后悔的时候，失落失望的时候才能感受到自己蠢在哪里。&lt;/p&gt;

      
    
    </summary>
    
      <category term="水楼" scheme="http://potnote.tk/categories/%E6%B0%B4%E6%A5%BC/"/>
    
    
      <category term="牢骚" scheme="http://potnote.tk/tags/%E7%89%A2%E9%AA%9A/"/>
    
  </entry>
  
  <entry>
    <title>使用Typescript命名空间（如果你觉得真的必要的话</title>
    <link href="http://potnote.tk/2017/10/20/%E4%BD%BF%E7%94%A8Typescript%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%88%E5%A6%82%E6%9E%9C%E4%BD%A0%E8%A7%89%E5%BE%97%E7%9C%9F%E7%9A%84%E5%BF%85%E8%A6%81%E7%9A%84%E8%AF%9D/"/>
    <id>http://potnote.tk/2017/10/20/使用Typescript命名空间（一）（如果你觉得真的必要的话/</id>
    <published>2017-10-19T16:54:16.000Z</published>
    <updated>2017-10-19T17:24:16.928Z</updated>
    
    <content type="html"><![CDATA[<p>开发复杂业务逻辑时，你自己写的变量名和同事的写的变量名起冲突了？想把内部模块中不同的细节部分从代码逻辑上分开？只是有强迫症？（今天来挖一挖Typescript的<em>Type</em>)<br><a id="more"></a><br>我认为命名空间这一概念顾名思义就是考虑到名字在不同环境下是代表着不同东西这一可能情况而被定义的。</p><p>比方说一村的门卫是个30岁的大叔经常被人叫做老王，二村的门卫是个40岁的大叔正巧也姓王，也被人叫做老王。</p><p>虽然他们都叫老王，但是他们是不同的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">interface Human &#123;</div><div class="line">village: string;</div><div class="line">&#125;</div><div class="line"></div><div class="line">namespace firstVillage &#123;</div><div class="line">export var oldWang : Human;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// ↑ which is different from ↓</div><div class="line"></div><div class="line">namespace secondVillage &#123;</div><div class="line">export var oldWang : Human;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是使用命名空间的时候，请遵循以下几个准则：<br>1.把逻辑相关联的对象和类型分在同一个命名空间里。<br>2.只在内部模块中使用命名空间来规避名称冲突的风险。（在外部模块中产生名称冲突只能说明设计者脑子有坑）这里有个小故事可以给大家看看：（摘自<a href="http://stackoverflow.com/questions/30357634/how-do-i-use-namespaces-with-typescript-external-modules" target="_blank" rel="external">http://stackoverflow.com/questions/30357634/how-do-i-use-namespaces-with-typescript-external-modules</a></p><p><em>Your friend Bob calls you up. “I have a great new organization scheme in my house”, he says, “come check it out!”. Neat, let’s go see what Bob has come up with.</em></p><p><em>You start in the kitchen and open up the pantry. There are 60 different boxes, each labelled “Pantry”. You pick a box at random and open it. Inside is a single box labelled “Grains”. You open up the “Grains” box and find a single box labelled “Pasta”. You open the “Pasta” box and find a single box labelled “Penne”. You open this box and find, as you expect, a bag of penne pasta.</em></p><p><em>Slightly confused, you pick up an adjacent box, also labelled “Pantry”. Inside is a single box, again labelled “Grains”. You open up the “Grains” box and, again, find a single box labelled “Pasta”. You open the “Pasta” box and find a single box, this one is labelled “Rigatoni”. You open this box and find… a bag of rigatoni pasta.</em></p><p><em>“It’s great!” says Bob. “Everything is in a namespace!”.</em></p><p><em>“But Bob…” you reply. “Your organization scheme is useless. You have to open up a bunch of boxes to get to anything, and it’s not actually any more convenient to find anything than if you had just put everything in one box instead of three. In fact, since your pantry is already sorted shelf-by-shelf, you don’t need the boxes at all. Why not just set the pasta on the shelf and pick it up when you need it?”</em></p><p><em>“You don’t understand — I need to make sure that no one else puts something that doesn’t belong in the ‘Pantry’ namespace. And I’ve safely organized all my pasta into the Pantry.Grains.Pasta namespace so I can easily find it”</em></p><p><em>Bob is a very confused man.</em></p><p>后续博文会更些更详细的关于ts类型特性的挖掘（看心情）</p><p>欢迎大家在下方评论区讨论（看不见建议先翻墙，disqus好像有时会连不上）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发复杂业务逻辑时，你自己写的变量名和同事的写的变量名起冲突了？想把内部模块中不同的细节部分从代码逻辑上分开？只是有强迫症？（今天来挖一挖Typescript的&lt;em&gt;Type&lt;/em&gt;)&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://potnote.tk/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Typescript" scheme="http://potnote.tk/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>写了个自动生成发布文章的脚本</title>
    <link href="http://potnote.tk/2017/10/19/%E5%86%99%E4%BA%86%E4%B8%AA%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>http://potnote.tk/2017/10/19/写了个自动生成发布文章的脚本/</id>
    <published>2017-10-18T22:02:40.000Z</published>
    <updated>2017-10-18T22:12:28.615Z</updated>
    
    <content type="html"><![CDATA[<p>纯粹偷懒，windows下的ssh-agent有毒，git bash里每次都要重新把publickey添加一遍才能连。。。</p><p>然后也懒得想为啥会这样就写了个自动添加公钥然后自动生成和部署的脚本，测试下来感觉还行。</p><p>欢迎各位来吐槽我的渣渣shellscript（点击Read More查看代码）</p><a id="more"></a><p><em>hexoDeploy.sh</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">eval `ssh-agent`</div><div class="line">ssh-add ~/.ssh/git_rsa_1</div><div class="line">ori=$&#123;pwd&#125;</div><div class="line">sshAdd=&quot;&quot;</div><div class="line">hexoOutput=&quot;&quot;</div><div class="line">ssh-add -l &gt; sshAdd</div><div class="line">echo $&#123;sshAdd&#125;</div><div class="line">cd /d/Git/PotNote-structure</div><div class="line">hexo generate &gt; hexoOutput</div><div class="line">echo $&#123;hexoOutput&#125;</div><div class="line">hexo deploy &gt; hexoOutput</div><div class="line">echo $&#123;hexoOutput&#125;</div><div class="line">cd $&#123;ori&#125;</div></pre></td></tr></table></figure></p><p>然后觉得每次运行的时候要打source+脚本文件名也很麻烦就又写了个脚本来在父进程中执行这个脚本</p><p><em>runHexoDeploy.sh</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ./hexoDeploy.sh</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;纯粹偷懒，windows下的ssh-agent有毒，git bash里每次都要重新把publickey添加一遍才能连。。。&lt;/p&gt;
&lt;p&gt;然后也懒得想为啥会这样就写了个自动添加公钥然后自动生成和部署的脚本，测试下来感觉还行。&lt;/p&gt;
&lt;p&gt;欢迎各位来吐槽我的渣渣shellscript（点击Read More查看代码）&lt;/p&gt;
    
    </summary>
    
      <category term="日志" scheme="http://potnote.tk/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="随笔" scheme="http://potnote.tk/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://potnote.tk/2017/10/19/hello-world/"/>
    <id>http://potnote.tk/2017/10/19/hello-world/</id>
    <published>2017-10-18T20:52:23.226Z</published>
    <updated>2017-10-18T20:52:23.228Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人类的一小步</title>
    <link href="http://potnote.tk/2017/10/19/%E4%BA%BA%E7%B1%BB%E7%9A%84%E4%B8%80%E5%B0%8F%E6%AD%A5/"/>
    <id>http://potnote.tk/2017/10/19/人类的一小步/</id>
    <published>2017-10-18T19:44:08.000Z</published>
    <updated>2017-10-18T20:43:07.423Z</updated>
    
    <content type="html"><![CDATA[<p>重新部署了一下博客，感觉以后可以写点学习笔记或者发发牢骚啥的</p><p>就这样吧，Hello World。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;重新部署了一下博客，感觉以后可以写点学习笔记或者发发牢骚啥的&lt;/p&gt;
&lt;p&gt;就这样吧，Hello World。&lt;/p&gt;

      
    
    </summary>
    
      <category term="日志" scheme="http://potnote.tk/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="随笔" scheme="http://potnote.tk/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
